name: Setup OIDC

on:
  workflow_call:
    inputs:
      role_name_prefix:
        description: "Prefijo para los roles IAM"
        required: true
        type: string
      repo_names:
        description: "Lista de repos autorizados para usar OIDC"
        required: true
        type: string
      oidc_actions:
        description: "Acciones permitidas para OIDC (branches/tags)"
        required: false
        type: string
        default: "*"
      policy_actions:
        description: "Acciones AWS permitidas por la política"
        required: false
        type: string
        default: '["s3:*","ec2:*"]'
      aws_region:
        description: "AWS region"
        required: true
        type: string
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true
    outputs:
      role_arn:
        description: "ARN del IAM Role creado/actualizado"
        value: ${{ jobs.setup-oidc.outputs.github_role_arn }}
      oidc_provider_arn:
        description: "ARN del OIDC Provider"
        value: ${{ jobs.setup-oidc.outputs.oidc_provider_arn }}

jobs:
  setup-oidc:
    runs-on: ubuntu-latest
    outputs:
      github_role_arn: ${{ steps.tf-outputs.outputs.github_role_arn }}
      oidc_provider_arn: ${{ steps.tf-outputs.outputs.oidc_provider_arn }}

    steps:
      # 1. Checkout del repositorio donde está la config de Terraform
      
      # - name: Checkout caller repo
      #   uses: actions/checkout@v4

      - name: Checkout reusable workflows repo
        uses: actions/checkout@v4
        with:
          repository: pulidovpe/reusable-workflows
          ref: main
          path: reusable-workflows

      # 2. Configurar credenciales AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      # 3. Instalar Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      # 4. Inicializar Terraform con backend remoto
      - name: Terraform Init
        run:  |
          cd reusable-workflows/terraform/oidc
          terraform init -input=false

      # 5. Terraform Plan (debug)
      - name: Terraform Plan
        run: |
          cd reusable-workflows/terraform/oidc
          terraform plan \
            -var='aws_region=${{ inputs.aws_region }}' \
            -var='role_name_prefix=${{ inputs.role_name_prefix }}' \
            -var='repo_names=${{ fromJSON(inputs.repo_names) }}' \
            -var='oidc_actions=${{ inputs.oidc_actions }}' \
            -var='policy_actions=${{ fromJSON(inputs.policy_actions) }}'

      # 6. Aplicar cambios
      - name: Terraform Apply
        run: |
          cd reusable-workflows/terraform/oidc
          terraform apply -auto-approve \
            -var='aws_region=${{ inputs.aws_region }}' \
            -var='role_name_prefix=${{ inputs.role_name_prefix }}' \
            -var='repo_names=${{ fromJSON(inputs.repo_names) }}' \
            -var='oidc_actions=${{ inputs.oidc_actions }}' \
            -var='policy_actions=${{ fromJSON(inputs.policy_actions) }}'

      # 7. Obtener outputs y pasarlos al entorno
      - name: Get Terraform Outputs
        id: tf-outputs
        run: |
          cd reusable-workflows/terraform/oidc
          echo "oidc_provider_arn=$(terraform output -raw oidc_provider_arn)" >> $GITHUB_OUTPUT
          echo "github_role_arn=$(terraform output -raw github_role_arn)" >> $GITHUB_OUTPUT