name: Setup OIDC

on:
  workflow_call:
    inputs:
      aws_account_id:
        description: "AWS Account ID"
        required: true
        type: string
      aws_region:
        description: "AWS region"
        required: true
        type: string
      role_name:
        description: "Nombre para el roles IAM"
        required: true
        type: string
      repo_names:
        description: 'JSON list de repos autorizados'
        required: true
        type: string
      oidc_actions:
        description: "Patrón de OIDC"
        required: false
        default: "*"
        type: string
      policy_actions:
        description: "Mapa de acciones para la política IAM por repositorio"
        required: false
        default: '{}'
        type: string

    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true

jobs:
  setup-oidc:
    runs-on: ubuntu-latest
    outputs:
      oidc_provider_arn: ${{ steps.tf-output.outputs.oidc_provider_arn }}
      github_roles_arn: ${{ steps.tf-output.outputs.github_roles_arn }}

    steps:
      # 1. Checkout del repositorio donde está la config de Terraform
      
      # - name: Checkout caller repo
      #   uses: actions/checkout@v4

      - name: Checkout reusable workflows repo
        uses: actions/checkout@v4
        with:
          repository: pulidovpe/reusable-workflows
          ref: main
          path: reusable-workflows

      # 2. Configurar credenciales AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      # 3. Instalar Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      # 4. Usar bash y aws cli para detectar proveedor y rol existente
      - name: Install-aws-cli-action
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@master
        with:
          version: 2
            
      # 5. Inicializar Terraform con backend remoto
      - name: Terraform Init
        run:  |
          cd reusable-workflows/terraform/oidc
          terraform init -input=false
          
      - name: Detectar OIDC si ya existe
        run: |
          set -e
          cd reusable-workflows/terraform/oidc
          OIDC_ARN=$(aws iam list-open-id-connect-providers \
            --query "OpenIDConnectProviderList[?contains(Arn, 'token.actions.githubusercontent.com')].Arn" \
            --output text --region "${{ inputs.aws_region }}" || echo "")

          if [ -n "$OIDC_ARN" ]; then
            echo "OIDC existente detectado: $OIDC_ARN"
            echo "oidc_exists=true" >> $GITHUB_ENV
            echo "OIDC_ARN=$OIDC_ARN" >> $GITHUB_ENV
          else
            echo "No existe OIDC, se creará uno nuevo"
            echo "oidc_exists=false" >> $GITHUB_ENV
          fi
          
      # 6. Generar dinámicamente el archivo terraform.auto.tfvars.json
      - name: Generar archivo tfvars dinámico
        run: |
          cd reusable-workflows/terraform/oidc
          # Aseguramos que los valores sean JSON válidos
          jq -n \
            --arg aws_region "${{ inputs.aws_region }}" \
            --arg role_name "${{ inputs.role_name }}" \
            --argjson repo_names '${{ inputs.repo_names }}' \
            --argjson policy_actions '${{ inputs.policy_actions }}' \
            --argjson oidc_actions '${{ inputs.oidc_actions }}' \
            '{
              aws_region: $aws_region,
              role_name: $role_name,
              repo_names: $repo_names,
              policy_actions: $policy_actions,
              oidc_actions: $oidc_actions
            }' > terraform.auto.tfvars.json
                        
            cat terraform.auto.tfvars.json
      
      - name: Importar OIDC existente si aplica
        if: env.oidc_exists == 'true'
        run: |
          cd reusable-workflows/terraform/oidc
          echo "Importando OIDC existente..."
          terraform import aws_iam_openid_connect_provider.github "${{ env.OIDC_ARN }}" || true

      - name: Mostrar estado tras importar
        if: env.OIDC_EXISTS == 'true'
        run: terraform state list || echo "Estado vacío"

      # 7. Terraform Plan
      - name: Terraform Plan
        run: |
          cd reusable-workflows/terraform/oidc
          terraform plan -var-file=terraform.auto.tfvars.json

      # 6. Aplicar cambios
      - name: Terraform Apply
        run: |
          cd reusable-workflows/terraform/oidc
          terraform apply -auto-approve -var-file=terraform.auto.tfvars.json

      # 7. Obtener outputs y pasarlos al entorno
      - name: Get Terraform Outputs
        id: tf-outputs
        run: |
          cd reusable-workflows/terraform/oidc
          echo "oidc_provider_arn=$(terraform output -raw oidc_provider_arn)" >> $GITHUB_OUTPUT
          echo "github_roles_arn=$(terraform output -json github_roles_arn)" >> $GITHUB_OUTPUT
