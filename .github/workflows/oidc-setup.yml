name: Setup AWS OIDC Provider

on:
  workflow_call:
    inputs:
      aws-account-id:
        description: 'ID de la cuenta AWS'
        required: true
        type: string
      repo-name:
        description: 'Nombre del repositorio (e.g., owner/repo)'
        required: true
        type: string
      role-name:
        description: 'Nombre del rol IAM'
        required: false
        type: string
        default: 'github-actions-role'
      permissions-policy:
        description: 'Política JSON de permisos (default: lectura mínima EC2/S3)'
        required: false
        type: string
        default: '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Action":["ec2:Describe*","s3:ListBucket"],"Resource":"*"}]}'
      aws-region:
        description: 'Región AWS'
        required: false
        type: string
        default: 'us-east-1'
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
    outputs:
      role-arn:
        description: 'ARN del rol creado/actualizado'
        value: ${{ jobs.setup.outputs.role-arn }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      role-arn: ${{ steps.set-output.outputs.role-arn }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials (para bootstrap)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws-region }}

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.0'

      - name: Verificar si OIDC Provider existe (usando bash y AWS CLI)
        id: check-provider
        shell: bash
        run: |
          PROVIDER_ARN=$(aws iam list-open-id-connect-providers | grep "token.actions.githubusercontent.com" | awk '{print $2}' | tr -d '"') || true
          if [ -n "$PROVIDER_ARN" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "provider_arn=$PROVIDER_ARN" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Crear Terraform files
        shell: bash
        run: |
          cat <<EOF > main.tf
          provider "aws" {
            region = "${{ inputs.aws-region }}"
          }

          data "aws_iam_openid_connect_provider" "github_existing" {
            count = ${{ steps.check-provider.outputs.exists == 'true' ? 1 : 0 }}
            url   = "https://token.actions.githubusercontent.com"
          }

          resource "aws_iam_openid_connect_provider" "github" {
            count           = ${{ steps.check-provider.outputs.exists == 'false' ? 1 : 0 }}
            url             = "https://token.actions.githubusercontent.com"
            client_id_list  = ["sts.amazonaws.com"]
            thumbprint_list = ["6938fd4d98bab03faadb97b34396831e3780aea1", "1c58a3a8518e8759bf075b76b5b2d4f2b7bd8e0b"]
          }

          resource "aws_iam_role" "github_role" {
            name = "${{ inputs.role-name }}"
            assume_role_policy = jsonencode({
              Version = "2012-10-17"
              Statement = [
                {
                  Effect = "Allow"
                  Principal = {
                    Federated = ${{ steps.check-provider.outputs.exists == 'true' ? 'data.aws_iam_openid_connect_provider.github_existing[0].arn' : 'aws_iam_openid_connect_provider.github[0].arn' }}
                  }
                  Action = "sts:AssumeRoleWithWebIdentity"
                  Condition = {
                    StringEquals = {
                      "token.actions.githubusercontent.com:aud" = "sts.amazonaws.com"
                      "token.actions.githubusercontent.com:sub" = "repo:${{ inputs.repo-name }}:*"
                    }
                  }
                }
              ]
            })
          }

          resource "aws_iam_role_policy" "github_policy" {
            name   = "github-policy"
            role   = aws_iam_role.github_role.id
            policy = "${{ inputs.permissions-policy }}"
          }
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Set Output
        id: set-output
        run: |
          ROLE_ARN="arn:aws:iam::${{ inputs.aws-account-id }}:role/${{ inputs.role-name }}"
          echo "role-arn=$ROLE_ARN" >> $GITHUB_OUTPUT